(let ([zero (lambda (f) (lambda (x) x))])
     (let ([succ (lambda (n) (lambda (f) (lambda (x) (f ((n f) x)))))])
          (let ([one (succ zero)])
               (let ([two (succ one)])
                    (let ([add (lambda (a b) ((b succ) a))])
                         (let ([mult (lambda (a b) ((a (lambda (x) (add x b))) zero))])
                                (let ([four (add two two)])
                                     (let ([hex (mult four four)])
                                        (let ([eval (lambda (n) ((n (lambda (n) (+ n 1))) 0))])
                                              (begin (print (eval (mult (add hex hex) (add hex hex))))
                                                     (print (eval (mult (mult (mult two (mult two (mult four (mult two two)))) (add hex hex))
                                                                        (mult (mult two (mult two (mult four (mult four two)))) hex))))))))))))))
